# Use new container infrastructure to enable caching
sudo: false

# Do not choose a language; we provide our own build tools.
language: generic

# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.stack
  - $HOME/.stack-work

# Ensure necessary system libraries are present
addons:
  apt:
    packages:
      - libgmp-dev

# Test a LTS and nightly resolver
env:
  global:
    - GLOBAL_ARGS=--no-terminal --install-ghc
  matrix:
    fast_finish: true
    - MATRIX_ARGS=--resolver=lts-11.7
    - MATRIX_ARGS=--resolver=lts-11
    - MATRIX_ARGS=--resolver=lts-12
    - MATRIX_ARGS=--resolver=nightly

# Allow nightly resolver, next version of LTS, and patch versions of current LTS builds to fail
matrix:
  allow_failures:
    # make sure patch versions don't cause problems
    - env: MATRIX_ARGS=--resolver=lts-11
    # lts-next
    - env: MATRIX_ARGS=--resolver=lts-12
    # bleeding edge
    - env: MATRIX_ARGS=--resolver=nightly

before_install:
# Download and unpack the stack executable
- mkdir -p ~/.local/bin
- export PATH=$HOME/.local/bin:$PATH
# retry if there is a network issue
- travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'

install:
# build cabal first to prevent OOM errors
- stack $GLOBAL_ARGS $MATRIX_ARGS build -j 1 Cabal
# pandoc can take a long time to build, causing travis to exit
# building some prereqs helps avoid this
- stack $GLOBAL_ARGS $MATRIX_ARGS build pandoc-types skylighting http-client
# pandoc can still take 10+ minutes to build, wait on it
- travis_wait stack $GLOBAL_ARGS $MATRIX_ARGS build pandoc
# Build the remainder of the dependencies
- stack $GLOBAL_ARGS $MATRIX_ARGS test --only-dependencies

script:
# run hakyll tests (check for dead links)
# If build fails, we would not be able to run these tests
- make STACK_ARGS="$GLOBAL_ARGS $MATRIX_ARGS" test
